x-environment: &default-environment
  DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres
  REDIS_URL: redis://redis:6379
  SECRET_KEY: ${SECRET_KEY:-django-insecure-your-secret-key-here}
  X_API_KEY: ${X_API_KEY}

services:
  backend:
    build:
      context: .
      target: web
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      <<: *default-environment
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS}
      SENTRY_DSN: ${SENTRY_DSN}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-2}
      LOG_REQUESTS: ${LOG_REQUESTS:-true}
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      migrations:
        condition: service_completed_successfully
      create_cache_table:
        condition: service_completed_successfully

  redis:
    image: redis:7-alpine

  postgres:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrations:
    build:
      context: .
      target: web
    command: uv run manage.py migrate
    environment:
      <<: *default-environment
    depends_on:
      postgres:
        condition: service_healthy

  create_cache_table:
    build:
      context: .
      target: web
    command: uv run manage.py createcachetable
    environment:
      <<: *default-environment
    depends_on:
      migrations:
        condition: service_completed_successfully

volumes:
  postgres_data:
